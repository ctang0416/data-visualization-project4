{
  "version": 3,
  "sources": ["../react-svg-tooltip/src/svg-point.ts", "../react-svg-tooltip/src/Tooltip.tsx"],
  "sourcesContent": ["/**\n * Returns the *x* and *y* coordinates of the mouse relative to the svg root container element.\n * The coordinates are returned as an array of two-elements \\[*x*, *y*].\n * Inspired by https://raw.githubusercontent.com/d3/d3-selection/master/src/point.js\n * @param svg the root svg container element\n * @param event the mouse event\n */\nconst svgPoint = (svg: SVGSVGElement, event: MouseEvent) => {\n    if (svg.createSVGPoint) {\n        let point = svg.createSVGPoint()\n        point.x = event.clientX\n        point.y = event.clientY\n        point = point.matrixTransform(svg.getScreenCTM().inverse())\n        return [point.x, point.y]\n    }\n    const rect = svg.getBoundingClientRect()\n    return [event.clientX - rect.left - svg.clientLeft, event.clientY - rect.top - svg.clientTop]\n}\n\nexport default svgPoint\n", "import * as React from 'react'\nimport * as ReactDOM from 'react-dom'\nimport svgPoint from './svg-point'\n\ntype Props = Readonly<{\n    triggerRef: React.RefObject<SVGElement>\n    containerRef?: React.RefObject<SVGSVGElement>\n    children: React.ReactNode | ((xOffset: number, yOffset: number) => React.ReactNode)\n}>\n\ntype TooltipHidden = Readonly<{\n    type: 'TooltipHidden'\n}>\n\ntype TooltipVisible = Readonly<{\n    type: 'TooltipVisible'\n    svgSvgElement: SVGSVGElement\n    x: number\n    y: number\n}>\n\ntype State = TooltipHidden | TooltipVisible\n\nexport class TooltipComponent extends React.Component<Props, State> {\n    public readonly state: Readonly<State> = { type: 'TooltipHidden' }\n\n    // Keep a reference to the mouse event triggering DOM node\n    // `triggerRef` may be null by the time we want to remove listeners\n    private safeMouseTrigger\n\n    public componentDidMount() {\n        const mouseTrigger = this.props.triggerRef.current\n        if (mouseTrigger && mouseTrigger.addEventListener) {\n            this.safeMouseTrigger = mouseTrigger\n            mouseTrigger.addEventListener(`mouseover`, this.updateTooltip)\n            mouseTrigger.addEventListener(`mousemove`, this.updateTooltip)\n            mouseTrigger.addEventListener(`mouseleave`, this.hideTooltip)\n        }\n    }\n\n    public render() {\n        if (this.state.type === 'TooltipHidden') {\n            return <g />\n        } else {\n            const x = this.state.x\n            const y = this.state.y\n\n            const tooltip = (\n                <g\n                    className=\"Tooltip\"\n                    transform={`translate(${x}, ${y})`}\n                    pointerEvents=\"none\" // tooltip should never grab mouse > prevent flickering\n                >\n                    {this.props.children instanceof Function ? this.props.children(x, y) : this.props.children}\n                </g>\n            )\n\n            return ReactDOM.createPortal(tooltip, this.state.svgSvgElement)\n        }\n    }\n\n    public componentWillUnmount() {\n        if (this.safeMouseTrigger && this.safeMouseTrigger.removeEventListener) {\n            this.safeMouseTrigger.removeEventListener(`mouseover`, this.updateTooltip)\n            this.safeMouseTrigger.removeEventListener(`mousemove`, this.updateTooltip)\n            this.safeMouseTrigger.removeEventListener(`mouseleave`, this.hideTooltip)\n        }\n    }\n\n    private readonly updateTooltip = (evt: MouseEvent) => {\n        if (this.props) {\n            const svg = this.props.containerRef\n                ? this.props.containerRef.current\n                : this.safeMouseTrigger\n                ? this.safeMouseTrigger.ownerSVGElement\n                : undefined\n            if (svg) {\n                const mousePosition = svgPoint(svg, evt)\n                this.setState({\n                    type: 'TooltipVisible',\n                    svgSvgElement: svg,\n                    x: mousePosition[0],\n                    y: mousePosition[1]\n                })\n            }\n        }\n    }\n\n    private readonly hideTooltip = () => {\n        this.setState({ type: 'TooltipHidden' })\n    }\n}\n\nexport default TooltipComponent\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAOA,IAAM,WAAW,mBAAC,KAAD,OAAA;MACT,IAAI,gBAAgB;QAChB,QAAQ,IAAI,eAAJ;AACZ,UAAM,IAAI,MAAM;AAChB,UAAM,IAAI,MAAM;AAChB,YAAQ,MAAM,gBAAgB,IAAI,aAAJ,EAAmB,QAAnB,CAAtB;WACD,CAAC,MAAM,GAAG,MAAM,CAAhB;;MAEL,OAAO,IAAI,sBAAJ;SACN,CAAC,MAAM,UAAU,KAAK,OAAO,IAAI,YAAY,MAAM,UAAU,KAAK,MAAM,IAAI,SAA5E;;ICqEF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oCArD+B,WAAA;UAC5B,gBAAA,aAAA,kBAAA;gCACA;AACA,qBAAa,iBAAb,aAA2C,KAAK,aAAhD;AACA,qBAAa,iBAAb,aAAA,KAAgD,aAAhD;;;;;;;;;;YASM,IAAI,KAAK,MAAM;YAEf,IAAA,KAAA,MAAA;;;;yBAee;4EAEqD,CAAA,IAAA,KAAA,MAAA,QAAA;;;;;;;;;;;;;;;;",
  "names": []
}
